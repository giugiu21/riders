{"ast":null,"code":"import { USERS } from '../mocks/user.mock';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthService {\n  constructor(UserService) {\n    this.UserService = UserService;\n  }\n  saveStorage(res) {\n    const user = {\n      username: res.username,\n      password: res.password\n    };\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  login(username, password) {\n    const user = USERS.find(user => user.username == username && user.password == password);\n    return of(user);\n  }\n  isLogged() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.UserService.userRole.next('');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.UserService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAAqBC,EAAE,QAAQ,MAAM;;;AAKrC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,WAAW,CAACC,GAAQ;IAClB,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAEF,GAAG,CAACE,QAAQ;MACtBC,QAAQ,EAAEH,GAAG,CAACG;KACf;IACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;EACpD;EAEAO,KAAK,CAACN,QAAgB,EAAEC,QAAgB;IACtC,MAAMF,IAAI,GAAGP,KAAK,CAACe,IAAI,CAACR,IAAI,IAAIA,IAAI,CAACC,QAAQ,IAAIA,QAAQ,IAAID,IAAI,CAACE,QAAQ,IAAIA,QAAQ,CAAC;IACvF,OAAOR,EAAE,CAAEM,IAAI,CAAC;EAClB;EAEAS,QAAQ;IACN,OAAOJ,IAAI,CAACK,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EAEAC,MAAM;IACJT,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAChB,WAAW,CAACiB,QAAQ,CAACC,IAAI,CAAC,EAAE,CAAC;EACpC;;AAxBWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["USERS","of","AuthService","constructor","UserService","saveStorage","res","user","username","password","localStorage","setItem","JSON","stringify","login","find","isLogged","parse","getItem","logout","removeItem","userRole","next","factory","providedIn"],"sourceRoot":"","sources":["/Users/giulia/Documents/Progetti/riders/riders/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UserService } from './user.service';\nimport { USERS } from '../mocks/user.mock';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private UserService: UserService) { }\n\n  saveStorage(res: any){\n    const user = {\n      username: res.username,\n      password: res.password,\n    }\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  login(username: string, password: string): Observable<any>{\n    const user = USERS.find(user => user.username == username && user.password == password);\n    return of (user);\n  }\n\n  isLogged(): boolean{\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  logout(): void{\n    localStorage.removeItem('user');\n    this.UserService.userRole.next('');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}