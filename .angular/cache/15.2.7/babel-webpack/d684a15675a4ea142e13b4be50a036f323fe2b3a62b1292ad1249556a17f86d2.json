{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthService {\n  constructor(UserService) {\n    this.UserService = UserService;\n  }\n  saveStorage(res) {\n    const user = {\n      username: res.username,\n      password: res.password\n    };\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  isLogged() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.UserService.userRole.next('');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.UserService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,WAAW,CAACC,GAAQ;IAClB,MAAMC,IAAI,GAAG;MACXC,QAAQ,EAAEF,GAAG,CAACE,QAAQ;MACtBC,QAAQ,EAAEH,GAAG,CAACG;KACf;IACDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;EACpD;EAEAO,QAAQ;IACN,OAAOF,IAAI,CAACG,KAAK,CAACL,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EAEAC,MAAM;IACJP,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACd,WAAW,CAACe,QAAQ,CAACC,IAAI,CAAC,EAAE,CAAC;EACpC;;AAnBWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmB,SAAXnB,WAAW;EAAAoB,YAFV;AAAM","names":["AuthService","constructor","UserService","saveStorage","res","user","username","password","localStorage","setItem","JSON","stringify","isLogged","parse","getItem","logout","removeItem","userRole","next","factory","providedIn"],"sourceRoot":"","sources":["/Users/giulia/Documents/Progetti/riders/riders/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private UserService: UserService) { }\n\n  saveStorage(res: any){\n    const user = {\n      username: res.username,\n      password: res.password,\n    }\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  isLogged(): boolean{\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  logout(): void{\n    localStorage.removeItem('user');\n    this.UserService.userRole.next('');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}