{"ast":null,"code":"import { of } from 'rxjs';\nimport { USERS } from '../mocks/user.mock';\nimport { RIDERS } from '../mocks/rider.mock';\nimport { RESTAURANT_OWNERS } from '../mocks/restaurant-owner.mock';\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {}\n  insertUser(user) {\n    USERS.push(user);\n    return of(USERS);\n  }\n  getRider(id) {\n    const rider = RIDERS.find(rider => rider._id == id);\n    return of(rider);\n  }\n  getOwner(id) {\n    const owner = RESTAURANT_OWNERS.find(owner => owner._id == id);\n    return of(owner);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoCA,EAAE,QAAO,MAAM;AACnD,SAASC,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAKlE,OAAM,MAAOC,WAAW;EAEtBC,eAAgB;EAEhBC,UAAU,CAACC,IAAS;IACjBN,KAAK,CAAEO,IAAI,CAACD,IAAI,CAAC;IAClB,OAAOP,EAAE,CAAEC,KAAK,CAAC;EACnB;EAEAQ,QAAQ,CAACC,EAAO;IACd,MAAMC,KAAK,GAAGT,MAAM,CAACU,IAAI,CAACD,KAAK,IAAIA,KAAK,CAACE,GAAG,IAAIH,EAAE,CAAC;IAClD,OAAOV,EAAE,CAAEW,KAAK,CAAC;EACpB;EAEAG,QAAQ,CAACJ,EAAO;IACd,MAAMK,KAAK,GAAGZ,iBAAiB,CAACS,IAAI,CAACG,KAAK,IAAIA,KAAK,CAACF,GAAG,IAAIH,EAAE,CAAC;IAC7D,OAAOV,EAAE,CAAEe,KAAK,CAAC;EACpB;;AAjBWX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;EAAAa,YAFV;AAAM","names":["of","USERS","RIDERS","RESTAURANT_OWNERS","UserService","constructor","insertUser","user","push","getRider","id","rider","find","_id","getOwner","owner","factory","providedIn"],"sourceRoot":"","sources":["/Users/giulia/Documents/Progetti/riders/riders/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject, of} from 'rxjs';\nimport { USERS } from '../mocks/user.mock';\nimport { RIDERS } from '../mocks/rider.mock';\nimport { RESTAURANT_OWNERS } from '../mocks/restaurant-owner.mock';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor() { }\n\n  insertUser(user: any):Observable<any>{\n    (USERS).push(user);\n    return of (USERS);\n  }\n\n  getRider(id: any):Observable<any>{\n    const rider = RIDERS.find(rider => rider._id == id);\n     return of (rider);\n  }\n\n  getOwner(id: any):Observable<any>{\n    const owner = RESTAURANT_OWNERS.find(owner => owner._id == id);\n     return of (owner);\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}